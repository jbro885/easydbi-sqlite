// Generated by CoffeeScript 1.10.0
(function() {
  var DBI, Driver, Errorlet, Sqlite3Driver, loglet, queryHelper, sqlite3,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  sqlite3 = require('sqlite3').verbose();

  DBI = require('easydbi');

  Driver = require('easydbi/lib/driver');

  queryHelper = require('easydbi/lib/query');

  loglet = require('loglet');

  Errorlet = require('errorlet');

  Sqlite3Driver = (function(superClass) {
    extend(Sqlite3Driver, superClass);

    Sqlite3Driver.pool = false;

    Sqlite3Driver.id = 0;

    function Sqlite3Driver(key, options1) {
      this.key = key;
      this.options = options1;
      Sqlite3Driver.__super__.constructor.call(this, this.key, this.options);
      this.connstr = this.makeConnStr(this.options);
      this.type = 'sqlite3';
    }

    Sqlite3Driver.prototype.makeConnStr = function(options) {
      if (options != null ? options.memory : void 0) {
        return ":memory:";
      } else if (options.filePath) {
        return options.filePath;
      } else {
        return ":memory:";
      }
    };

    Sqlite3Driver.prototype.connect = function(cb) {
      var self;
      self = this;
      return this.inner = new sqlite3.Database(this.connstr, function(err) {
        if (err) {
          return cb(err);
        } else {
          loglet.debug((self.driverName()) + ".connect:OK", self.id);
          return cb(null, self);
        }
      });
    };

    Sqlite3Driver.prototype.isConnected = function() {
      var val;
      val = this.inner instanceof sqlite3.Database;
      loglet.debug((this.driverName()) + ".isConnected", val);
      return val;
    };

    Sqlite3Driver.prototype.innerQuery = function(stmt, args, cb) {
      var e, error, normedArgs, normedStmt, ref;
      try {
        ref = queryHelper.arrayify(stmt, args), normedStmt = ref[0], normedArgs = ref[1];
        return this.inner.all(normedStmt, normedArgs, cb);
      } catch (error) {
        e = error;
        return cb(e);
      }
    };

    Sqlite3Driver.prototype.innerExec = function(stmt, args, cb) {
      var normedArgs, normedStmt, ref, self, waitCallback;
      self = this;
      waitCallback = function() {
        return self.innerExec(stmt, args, cb);
      };
      ref = queryHelper.arrayify(stmt, args), normedStmt = ref[0], normedArgs = ref[1];
      return this.inner.run(normedStmt, normedArgs, function(err, res) {
        var ref1;
        if ((err != null ? err.code : void 0) === 'SQLITE_BUSY') {
          return setTimeout(waitCallback, ((ref1 = self.options) != null ? ref1.timeout : void 0) || 500);
        } else {
          return cb(err);
        }
      });
    };

    Sqlite3Driver.prototype.innerDisconnect = function(cb) {
      return this.inner.close(cb);
    };

    Sqlite3Driver.prototype.innerClose = function(cb) {
      return this.inner.close(cb);
    };

    return Sqlite3Driver;

  })(Driver);

  DBI.register('sqlite', Sqlite3Driver);

  module.exports = Sqlite3Driver;

}).call(this);
